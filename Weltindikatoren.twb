<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20251.25.0313.2002                               -->
<workbook original-version='18.1' source-build='2025.1.0 (20251.25.0313.2002)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource inline='true' name='Weltindikatoren' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Weltindikatoren' name='hyper.02tkzk21390wwr18vjk7f1tnp84z'>
            <connection authentication='auth-none' author-locale='de_DE' class='hyper' dbname='C:/Users/markd/Documents/Eigenes Tableau-Repository/Datenquellen/2025.1/de_DE-EU/Weltindikatoren.hyper' default-settings='yes' sslmode='' username='tableau_internal_user' />
          </named-connection>
        </named-connections>
        <relation connection='hyper.02tkzk21390wwr18vjk7f1tnp84z' name='Extract' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Ausreiseverkehr</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Ausreiseverkehr]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ausreiseverkehr</remote-alias>
            <ordinal>0</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1027</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BIP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[BIP]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>BIP</remote-alias>
            <ordinal>1</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1630</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bevölkerung 0–14</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Bevölkerung 0–14]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Bevölkerung 0–14</remote-alias>
            <ordinal>2</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>375</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bevölkerung 15–64</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Bevölkerung 15–64]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Bevölkerung 15–64</remote-alias>
            <ordinal>3</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>290</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bevölkerung 65+</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Bevölkerung 65+]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Bevölkerung 65+</remote-alias>
            <ordinal>4</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>202</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bevölkerung in Städten</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Bevölkerung in Städten]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Bevölkerung in Städten</remote-alias>
            <ordinal>5</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>747</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO2-Emissionen</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CO2-Emissionen]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>CO2-Emissionen</remote-alias>
            <ordinal>6</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1261</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Einreiseverkehr</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Einreiseverkehr]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Einreiseverkehr</remote-alias>
            <ordinal>7</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1246</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energienutzung</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Energienutzung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Energienutzung</remote-alias>
            <ordinal>8</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1553</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geburtenrate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Geburtenrate]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Geburtenrate</remote-alias>
            <ordinal>9</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>46</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gesamtbevölkerung</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Gesamtbevölkerung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Gesamtbevölkerung</remote-alias>
            <ordinal>10</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2629</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Geschäftsfreundlichkeit</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Geschäftsfreundlichkeit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Geschäftsfreundlichkeit</remote-alias>
            <ordinal>11</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>329</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gesundheitsausgaben in % BIP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gesundheitsausgaben in % BIP]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Gesundheitsausgaben in % BIP</remote-alias>
            <ordinal>12</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>142</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gesundheitsausgaben pro Kopf</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Gesundheitsausgaben pro Kopf]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Gesundheitsausgaben pro Kopf</remote-alias>
            <ordinal>13</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>790</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gewerbesteuersatz</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gewerbesteuersatz]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Gewerbesteuersatz</remote-alias>
            <ordinal>14</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>388</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Internetnutzung</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Internetnutzung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Internetnutzung</remote-alias>
            <ordinal>15</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>584</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Jahr</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Jahr]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Jahr</remote-alias>
            <ordinal>16</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>13</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Kreditzinsen</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Kreditzinsen]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Kreditzinsen</remote-alias>
            <ordinal>17</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>310</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Land/Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Land/Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Land/Region</remote-alias>
            <ordinal>18</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>207</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lebenserwartung Frauen</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Lebenserwartung Frauen]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Lebenserwartung Frauen</remote-alias>
            <ordinal>19</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>47</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lebenserwartung Männer</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Lebenserwartung Männer]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Lebenserwartung Männer</remote-alias>
            <ordinal>20</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>44</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mobiltelefonnutzung</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mobiltelefonnutzung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Mobiltelefonnutzung</remote-alias>
            <ordinal>21</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>972</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>22</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>6</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Steueraufwand in Stunden</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Steueraufwand in Stunden]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Steueraufwand in Stunden</remote-alias>
            <ordinal>23</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>278</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Säuglingssterblichkeit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Säuglingssterblichkeit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Säuglingssterblichkeit</remote-alias>
            <ordinal>24</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>131</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tage bis Geschäftsgründung</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Tage bis Geschäftsgründung]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Tage bis Geschäftsgründung</remote-alias>
            <ordinal>25</ordinal>
            <family>Weltindikatoren.csv</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>116</approx-count>
            <contains-null>true</contains-null>
            <object-id>[Migrated Data]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[Bevölkerung 0–14]' role='measure' type='quantitative' />
      <column datatype='real' name='[Bevölkerung 15–64]' role='measure' type='quantitative' />
      <column datatype='real' name='[Bevölkerung 65+]' role='measure' type='quantitative' />
      <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Lebenserwartung Frauen]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Lebenserwartung Männer]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Migrierte Daten' datatype='table' name='[__tableau_internal_object_id__].[Migrated Data]' role='measure' type='quantitative' />
      <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Bevölkerung 0–14]' derivation='Sum' name='[sum:Bevölkerung 0–14:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Bevölkerung 15–64]' derivation='Sum' name='[sum:Bevölkerung 15–64:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Bevölkerung 65+]' derivation='Sum' name='[sum:Bevölkerung 65+:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Lebenserwartung Frauen]' derivation='Sum' name='[sum:Lebenserwartung Frauen:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Lebenserwartung Männer]' derivation='Sum' name='[sum:Lebenserwartung Männer:qk]' pivot='key' type='quantitative' />
      <group caption='Aktion (Land/Region)' hidden='true' name='[Action (Land/Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Land/Region]' />
        </groupfilter>
      </group>
      <folders-common>
        <folder name='Bevölkerung'>
          <folder-item name='[Bevölkerung 0–14]' type='field' />
          <folder-item name='[Bevölkerung 15–64]' type='field' />
          <folder-item name='[Bevölkerung 65+]' type='field' />
          <folder-item name='[Bevölkerung in Städten]' type='field' />
          <folder-item name='[Geburtenrate]' type='field' />
          <folder-item name='[Gesamtbevölkerung]' type='field' />
        </folder>
        <folder name='Entwicklung'>
          <folder-item name='[Ausreiseverkehr]' type='field' />
          <folder-item name='[BIP]' type='field' />
          <folder-item name='[CO2-Emissionen]' type='field' />
          <folder-item name='[Einreiseverkehr]' type='field' />
          <folder-item name='[Energienutzung]' type='field' />
          <folder-item name='[Internetnutzung]' type='field' />
          <folder-item name='[Mobiltelefonnutzung]' type='field' />
        </folder>
        <folder name='Geschäft'>
          <folder-item name='[Geschäftsfreundlichkeit]' type='field' />
          <folder-item name='[Gewerbesteuersatz]' type='field' />
          <folder-item name='[Kreditzinsen]' type='field' />
          <folder-item name='[Steueraufwand in Stunden]' type='field' />
          <folder-item name='[Tage bis Geschäftsgründung]' type='field' />
        </folder>
        <folder name='Gesundheit'>
          <folder-item name='[Gesundheitsausgaben in % BIP]' type='field' />
          <folder-item name='[Gesundheitsausgaben pro Kopf]' type='field' />
          <folder-item name='[Lebenserwartung Frauen]' type='field' />
          <folder-item name='[Lebenserwartung Männer]' type='field' />
          <folder-item name='[Säuglingssterblichkeit]' type='field' />
        </folder>
      </folders-common>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Land/Region:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Äquatorialguinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Finnland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Komoren&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sambia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;St. Martin (Französischer Teil)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tschechien&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dschibuti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kamerun&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Libyen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mosambik&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippinen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Singapur&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tadschikistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vereinigte Arabische Emirate&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Amerikanisch-Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolivien&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kenia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Madagaskar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Neukaledonien&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ruanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Spanien&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Weißrussland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aserbaidschan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kroatien&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mauretanien&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norwegen&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi-Arabien&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks- und Caicosinseln&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentinien&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bulgarien&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Frankreich&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Irland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kongo (Brazzaville)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;St. Martin (Niederländischer Teil)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tunesien&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bosnien und Herzegowina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Indien&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kirgistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Neuseeland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rumänien&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zentralafrikanische Republik&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kaimaninseln&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Libanon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolei&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Swasiland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ägypten&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kanada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Polen&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slowakei&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tansania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vereinigte Staaten von Amerika&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dänemark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Griechenland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jemen&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Moldawien&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbien&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;SVZ Hongkong, China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Botsuana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Färöer-Inseln&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Indonesien&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Russland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;St. Kitts und Nevis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Trinidad und Tobago&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zypern&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Äthiopien&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgien&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italien&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kuba&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Schweden&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Südkorea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australien&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jamaika&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mexiko&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Österreich&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Südsudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bangladesch&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Deutschland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Grönland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Jordanien&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lettland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua-Neuguinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychellen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;SVZ Macau, China&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Usbekistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belgien&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominikanische Republik&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kambodscha&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Simbabwe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Syrien&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Armenien&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Französisch-Polynesien&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Island&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kongo (Kinshasa)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marokko&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nordkorea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;St. Vincent u. die Grenadinen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Türkei&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua und Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brasilien&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fidschi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Irak&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kolumbien&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malediven&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niederlande&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Salomonen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tschad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albanien&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kasachstan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Litauen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slowenien&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vereinigtes Königreich&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mikronesien, Föd. Staaten&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Surinam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ungarn&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gabun&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Marshallinseln&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nordmazedonien&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;São Tomé und Príncipe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Südafrika&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algerien&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Elfenbeinküste&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Katar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Luxemburg&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[Weltindikatoren].[sum:Bevölkerung 0–14:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[Weltindikatoren].[sum:Lebenserwartung Frauen:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[Weltindikatoren].[sum:Lebenserwartung Männer:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[Weltindikatoren].[sum:Bevölkerung 65+:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[Weltindikatoren].[sum:Bevölkerung 15–64:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Vereinigte Staaten von Amerika&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Migrierte Daten' id='Migrated Data'>
            <properties context=''>
              <relation connection='hyper.02tkzk21390wwr18vjk7f1tnp84z' name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generiert)' name='[Action1_12FD708BA9CA40F0A3C9CAE2BD2F1FB4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Demografische Struktur' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='BIP-Entwicklung pro Land'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='integer' name='[BIP]' role='measure' type='quantitative' />
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[BIP]' derivation='Sum' name='[sum:BIP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Jahr]' derivation='Year' name='[yr:Jahr:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Weltindikatoren].[Action (Land/Region)]'>
            <groupfilter function='level-members' level='[Land/Region]' user:ui-action-filter='[Action1_12FD708BA9CA40F0A3C9CAE2BD2F1FB4]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[Weltindikatoren].[none:Land/Region:nk]'>
            <groupfilter function='level-members' level='[none:Land/Region:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Weltindikatoren].[none:Land/Region:nk]</column>
            <column>[Weltindikatoren].[Action (Land/Region)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Weltindikatoren].[sum:BIP:qk]' field-type='quantitative' max='18608948066679' min='-3628376573770' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[Weltindikatoren].[none:Land/Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[Weltindikatoren].[sum:BIP:qk]</rows>
        <cols>[Weltindikatoren].[yr:Jahr:ok]</cols>
      </table>
      <simple-id uuid='{E885C925-5EB8-4802-AA05-2BA4B595AA38}' />
    </worksheet>
    <worksheet name='CO2-Emissionen pro Kopf'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='integer' name='[CO2-Emissionen]' role='measure' type='quantitative' />
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[CO2-Emissionen]' derivation='Sum' name='[sum:CO2-Emissionen:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Jahr]' derivation='Year' name='[yr:Jahr:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Weltindikatoren].[Action (Land/Region)]'>
            <groupfilter function='level-members' level='[Land/Region]' user:ui-action-filter='[Action1_12FD708BA9CA40F0A3C9CAE2BD2F1FB4]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[Weltindikatoren].[yr:Jahr:ok]'>
            <groupfilter function='member' level='[yr:Jahr:ok]' member='2012' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Weltindikatoren].[yr:Jahr:ok]</column>
            <column>[Weltindikatoren].[Action (Land/Region)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Weltindikatoren].[Longitude (generated)]' field-type='quantitative' max='1673922.2970023674' min='654358.23681105289' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Weltindikatoren].[Latitude (generated)]' field-type='quantitative' max='7371595.271820928' min='5986322.6265480118' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Weltindikatoren].[sum:CO2-Emissionen:qk]' num-steps='6' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[Weltindikatoren].[sum:CO2-Emissionen:qk]' />
              <size column='[Weltindikatoren].[sum:CO2-Emissionen:qk]' />
              <lod column='[Weltindikatoren].[none:Land/Region:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[Weltindikatoren].[Latitude (generated)]</rows>
        <cols>[Weltindikatoren].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{DCF98C24-D995-49C5-AB4B-7284F5C48E52}' />
    </worksheet>
    <worksheet name='Demografische Struktur'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='real' name='[Bevölkerung 0–14]' role='measure' type='quantitative' />
            <column datatype='real' name='[Bevölkerung 15–64]' role='measure' type='quantitative' />
            <column datatype='real' name='[Bevölkerung 65+]' role='measure' type='quantitative' />
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Jahr]' derivation='None' name='[none:Jahr:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Bevölkerung 0–14]' derivation='Sum' name='[sum:Bevölkerung 0–14:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Bevölkerung 15–64]' derivation='Sum' name='[sum:Bevölkerung 15–64:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Bevölkerung 65+]' derivation='Sum' name='[sum:Bevölkerung 65+:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[Weltindikatoren].[none:Jahr:qk]' included-values='in-range'>
            <min>#2000-01-12#</min>
          </filter>
          <filter class='categorical' column='[Weltindikatoren].[none:Land/Region:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ägypten&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Albanien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Algerien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Amerikanisch-Samoa&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Antigua und Barbuda&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Äquatorialguinea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Argentinien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Armenien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Aruba&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Aserbaidschan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Äthiopien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Australien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bahamas&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bangladesch&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Belgien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bolivien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bosnien und Herzegowina&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Botsuana&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Brasilien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Bulgarien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Curaçao&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Dänemark&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Deutschland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Dominica&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Dominikanische Republik&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Dschibuti&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Elfenbeinküste&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Estland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Färöer-Inseln&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Fidschi&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Finnland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Frankreich&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Französisch-Polynesien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Gabun&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Gambia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Georgien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Griechenland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Grönland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Guyana&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Indien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Indonesien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Irak&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Irland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Island&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Italien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Jamaika&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Jemen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Jordanien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kaimaninseln&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kambodscha&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kamerun&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kanada&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kasachstan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Katar&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kenia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kirgistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kolumbien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Komoren&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kongo (Brazzaville)&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kongo (Kinshasa)&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kroatien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kuba&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Lettland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Libanon&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Libyen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Litauen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Luxemburg&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Madagaskar&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Malediven&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Marokko&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Marshallinseln&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mauretanien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mexiko&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mikronesien, Föd. Staaten&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Moldawien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mongolei&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Mosambik&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Neukaledonien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Neuseeland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Niederlande&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Nordkorea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Nordmazedonien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Norwegen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Österreich&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Papua-Neuguinea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Philippinen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Polen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ruanda&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Rumänien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Russland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Salomonen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Sambia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;São Tomé und Príncipe&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Saudi-Arabien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Schweden&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Schweiz&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Serbien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Seychellen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Simbabwe&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Singapur&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Slowakei&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Slowenien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Spanien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;St. Kitts und Nevis&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;St. Lucia&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;St. Martin (Französischer Teil)&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;St. Martin (Niederländischer Teil)&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;St. Vincent u. die Grenadinen&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Südafrika&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Südkorea&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Südsudan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Surinam&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;SVZ Hongkong, China&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;SVZ Macau, China&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Swasiland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Syrien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tadschikistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tansania&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tonga&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Trinidad und Tobago&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tschad&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tschechien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Tunesien&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Türkei&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Turkmenistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Turks- und Caicosinseln&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Ungarn&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Usbekistan&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Venezuela&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Vereinigte Arabische Emirate&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Vereinigte Staaten von Amerika&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Vereinigtes Königreich&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Vietnam&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Weißrussland&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Zentralafrikanische Republik&quot;' />
              <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Zypern&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Weltindikatoren].[none:Jahr:qk]</column>
            <column>[Weltindikatoren].[none:Land/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[Weltindikatoren].[sum:Bevölkerung 0–14:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[Weltindikatoren].[sum:Bevölkerung 15–64:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[Weltindikatoren].[sum:Bevölkerung 65+:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[Weltindikatoren].[none:Land/Region:nk]</rows>
        <cols>([Weltindikatoren].[sum:Bevölkerung 0–14:qk] + ([Weltindikatoren].[sum:Bevölkerung 15–64:qk] + [Weltindikatoren].[sum:Bevölkerung 65+:qk]))</cols>
      </table>
      <simple-id uuid='{011B3B2E-F158-46C7-8371-FB7C5142B394}' />
    </worksheet>
    <worksheet name='Gesundheitsausgaben im Vergleich'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='real' name='[Gesundheitsausgaben in % BIP]' role='measure' type='quantitative' />
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Gesundheitsausgaben in % BIP]' derivation='Sum' name='[sum:Gesundheitsausgaben in % BIP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Jahr]' derivation='Year' name='[yr:Jahr:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Weltindikatoren].[yr:Jahr:ok]'>
            <groupfilter function='member' level='[yr:Jahr:ok]' member='2012' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Weltindikatoren].[yr:Jahr:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Weltindikatoren].[sum:Gesundheitsausgaben in % BIP:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[Weltindikatoren].[none:Land/Region:nk]</cols>
      </table>
      <simple-id uuid='{6FCAA548-032C-471C-80C4-BBA4BB716501}' />
    </worksheet>
    <worksheet name='Korrelation Internetnutzung und BIP'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='integer' name='[BIP]' role='measure' type='quantitative' />
            <column datatype='real' name='[Internetnutzung]' role='measure' type='quantitative' />
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[BIP]' derivation='Sum' name='[sum:BIP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Internetnutzung]' derivation='Sum' name='[sum:Internetnutzung:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Jahr]' derivation='Year' name='[yr:Jahr:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Weltindikatoren].[yr:Jahr:ok]'>
            <groupfilter function='member' level='[yr:Jahr:ok]' member='2012' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Weltindikatoren].[yr:Jahr:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[Weltindikatoren].[sum:Internetnutzung:qk]' field-type='quantitative' max='0.99742177430802548' min='-0.10480070140211649' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[Weltindikatoren].[sum:BIP:qk]' field-type='quantitative' max='16968011321161' min='-1750444373689' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[Weltindikatoren].[none:Land/Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[Weltindikatoren].[sum:BIP:qk]</rows>
        <cols>[Weltindikatoren].[sum:Internetnutzung:qk]</cols>
      </table>
      <simple-id uuid='{5684B498-9B32-4CBE-94C9-7C510C906FC8}' />
    </worksheet>
    <worksheet name='Lebenserwartung nach Geschlecht'>
      <table>
        <view>
          <datasources>
            <datasource name='Weltindikatoren' />
          </datasources>
          <datasource-dependencies datasource='Weltindikatoren'>
            <column datatype='date' name='[Jahr]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Land/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Lebenserwartung Frauen]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Lebenserwartung Männer]' role='measure' type='quantitative' />
            <column-instance column='[Land/Region]' derivation='None' name='[none:Land/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Lebenserwartung Frauen]' derivation='Sum' name='[sum:Lebenserwartung Frauen:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Lebenserwartung Männer]' derivation='Sum' name='[sum:Lebenserwartung Männer:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Jahr]' derivation='Year' name='[yr:Jahr:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[Weltindikatoren].[none:Land/Region:nk]'>
            <groupfilter function='member' level='[none:Land/Region:nk]' member='&quot;Deutschland&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[Weltindikatoren].[none:Land/Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[Weltindikatoren].[sum:Lebenserwartung Frauen:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[Weltindikatoren].[sum:Lebenserwartung Männer:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([Weltindikatoren].[sum:Lebenserwartung Frauen:qk] + [Weltindikatoren].[sum:Lebenserwartung Männer:qk])</rows>
        <cols>[Weltindikatoren].[yr:Jahr:ok]</cols>
      </table>
      <simple-id uuid='{A93103E0-83AC-4C7A-BFC5-B087FCD914CB}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='16' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='98000' id='5' type-v2='layout-basic' w='82400' x='800' y='1000'>
                <zone h='49000' id='3' name='BIP-Entwicklung pro Land' w='82400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='49000' id='12' name='Demografische Struktur' w='41200' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='49000' id='20' name='Lebenserwartung nach Geschlecht' w='41200' x='42000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='98000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='16000' x='83200' y='1000'>
                <zone fixed-size='253' h='32625' id='8' is-fixed='true' name='BIP-Entwicklung pro Land' pane-specification-id='0' param='[Weltindikatoren].[none:Land/Region:nk]' type-v2='color' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='57250' id='17' name='CO2-Emissionen pro Kopf' w='16000' x='83200' y='33625'>
                  <layout-cache minheight='272' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='8125' id='19' name='CO2-Emissionen pro Kopf' pane-specification-id='0' param='[Weltindikatoren].[sum:CO2-Emissionen:qk]' type-v2='color' w='16000' x='83200' y='90875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='22' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='21' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='BIP-Entwicklung pro Land' w='82400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='253' h='32625' id='8' name='BIP-Entwicklung pro Land' pane-specification-id='0' param='[Weltindikatoren].[none:Land/Region:nk]' type-v2='color' w='16000' x='83200' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='57250' id='17' is-fixed='true' name='CO2-Emissionen pro Kopf' w='16000' x='83200' y='33625'>
                  <layout-cache minheight='272' minwidth='202' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8125' id='19' name='CO2-Emissionen pro Kopf' pane-specification-id='0' param='[Weltindikatoren].[sum:CO2-Emissionen:qk]' type-v2='color' w='16000' x='83200' y='90875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='12' is-fixed='true' name='Demografische Struktur' w='41200' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='20' is-fixed='true' name='Lebenserwartung nach Geschlecht' w='41200' x='42000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{4BA7331E-C7DA-4606-A1C0-FE83B5CF3183}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='BIP-Entwicklung pro Land'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='170'>
            <card pane-specification-id='0' param='[Weltindikatoren].[none:Land/Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[none:Land/Region:nk]</field>
            <field>[Weltindikatoren].[yr:Jahr:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{99F993D9-02E5-479B-9D98-3EC84F0D96BD}' />
    </window>
    <window class='worksheet' name='Demografische Struktur'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[:Measure Names]</field>
            <field>[Weltindikatoren].[none:Jahr:qk]</field>
            <field>[Weltindikatoren].[none:Land/Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{735C380C-070D-408E-A9FA-0A566740D060}' />
    </window>
    <window class='worksheet' name='CO2-Emissionen pro Kopf'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='170'>
            <card pane-specification-id='0' param='[Weltindikatoren].[sum:CO2-Emissionen:qk]' type='size' />
            <card pane-specification-id='0' param='[Weltindikatoren].[sum:CO2-Emissionen:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[yr:Jahr:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B8B19509-240B-4349-A9F1-E8A10B8E7C03}' />
    </window>
    <window class='worksheet' name='Gesundheitsausgaben im Vergleich'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[none:Land/Region:nk]</field>
            <field>[Weltindikatoren].[yr:Jahr:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0CB1B923-BB95-41E7-93DB-514050D530AC}' />
    </window>
    <window class='worksheet' name='Lebenserwartung nach Geschlecht'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[:Measure Names]</field>
            <field>[Weltindikatoren].[none:Land/Region:nk]</field>
            <field>[Weltindikatoren].[yr:Jahr:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FE7EAD28-3ECF-4B06-A18F-E71EB34B1C77}' />
    </window>
    <window class='worksheet' name='Korrelation Internetnutzung und BIP'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Weltindikatoren].[none:Land/Region:nk]</field>
            <field>[Weltindikatoren].[yr:Jahr:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FA868761-B788-4417-9AEF-E5FC541C8313}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='BIP-Entwicklung pro Land'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[Weltindikatoren].[none:Land/Region:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='CO2-Emissionen pro Kopf'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Demografische Struktur' />
        <viewpoint name='Lebenserwartung nach Geschlecht'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{AC82D3F4-2EF5-43F0-BA9C-066663937EA0}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='BIP-Entwicklung pro Land' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CO2-Emissionen pro Kopf' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Demografische Struktur' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='84' name='Gesundheitsausgaben im Vergleich' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Korrelation Internetnutzung und BIP' width='192'>
      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
      O9bx8qHz5IsmvSNhvv6FXfz4nbO81zPGzs56RmcW6GgKMjARxWHXaK8LcH4iyoGdrezb0rQ4
      6zMRYyKcwOd1YtdU3j45CsDGlhAbmkKcGQ1z75YmntzXiaLAmbH5JQFcctEmI0myeZ3925p5
      4u4OZqIpvvbodtRPKO/saJiDJ0aYCCdRVIXekTnOX5gH4Nn7N2GYFv/8bh/feHo3C6k8P33/
      HC8+uxfTtHjz2BDnxucZnYmTLxpYlqCxtorp+SQHT4zw8J52Xnx2LzZNZXAyyutHhnDYNdZf
      DLLJFXW2tNVwajjMZDhJoMrFW8eH2b+tGZu2+F3hv3zzcWLJHC992H/ZzF2+aPD3r3fzuR0t
      vNs9Rjyd5+Hd7dT4PXz39W58bidF3eQf3zqF9u1vf/vbN/WULZNLGWKWu54FIJ7KMBHJcKRv
      klxBJ5MrEkvliCaz9I1F+M4rXfy6a4z6oJeWdX4iiSxjMwlsmsqDO1tRVJWT56dx2jWO9k1R
      0E3m4xl+/kE/z39uMyMzC/zwV72cG4tw8OQo6VwR3TARYlFcx85NMxtLY9NUqtyOpUYvFA3i
      6Ty/PD5M0Ocini7wpc9t5fG9HcRSOXTTxK6pqKpGNJljfC7BTDTFgR0tnB6a42fvn8PjspMr
      6Kyr9vLrrjH+5Cv7eadrjP4LUSwh6BuLEF7IcOL8NE/v38jbXaM8d2ATOzrqeP3IEDs76vjZ
      ++eYCCeWjhMCjvZN8fl7OvB5nBzpm+S1I4M01fioC3p5+dB5nHYbw9MLTIST7N3YQCyVw+20
      k8nrfOfVLrJ5nUS2gCUE6xuq6b8Q5c9//0Gq3A4M0+JI3yR3ddTh9zp5+dAApmlxuG+SVz4a
      IJEuEIln2dQSIpvXyeZ13E47W9pqGJiI4fM4aG+o5nuv91DUTQJeJ8NTCzTV+vC6HHQPzdI/
      Pk9DTRVNNVV0NgX5xYfn2belif4L86SyBc5diNDZFKKjsRpLCMILGSbDSYq6yWN722ms9fO9
      N3porPGxrb2WXMHgXz69m4f3tHHftuYyvgMIweToAHHDQWOVyuhMlOb1G/A7baSzaWwCAvX1
      S11Mud8BZqIp/vN33iaSLM1ntmkqhmlRG/CQyRcp6iamJXDaNYoXH+pLKIDLacM0BYa1GFLo
      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
    </thumbnail>
    <thumbnail height='192' name='Lebenserwartung nach Geschlecht' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAATFElEQVR4nO3d2Y9U55nH8e/Za+vq6r1ZGhpowIAxduzEnkSxY2lyG81cRLmYuZr530a5
      iDQTZUaT0cRKNDbxCjaYHRp6X6q3qq7t7O9cNBAvXccNVBddVc9HQoBojp6qOr865z3vpiml
      FEL0KP1lFyDEy7QvAQiCgCiK9uPQQrTUvgTA8zwJgOgIcgskXlh9a4mVsgtAZWOF4rb7kiva
      O/NlFyA6X6U4w0MVM331HsQusxWNt1+/wObaKhOnzjM+mH3ZJTYlVwDxQpRSuK6Lu7XC7NIS
      H391i9OnjnPrxjXuLVcZHci87BITyRVAvJCgusF0yeFHr03wZaPKiVOnODo+St4xwelD17SX
      XWIibT/6AarVKrZtY9t2qw8tREs9vQJ4nke9Xm/JQV3XxTRNTFMuMOJgkyuA6GnSCBY9TQIg
      epoEQPQ0aaUeMM2aZEqBF4S4fogXRPiBDDV5Vkop3CDC80PqXkDDDV4kAIo4ilFo6LpGFMUY
      hsGzPPatNXxKtc7pNn8RcayouwGuH1F1fTw/fPpB1NyAhrfz95rr4/oRDT/ADyIaXkjDC3D9
      ENPUcUyTtGNiW8bLfkkdR9M0UpaBY5tkHIt0ynr+AKg44ssrnxFENkPDGTY3tpl85SJjhb13
      e//hr/e4/PX885bQUXRdI5OycCyDbMoi7VhPP4h8xmFsIItjmWTTNinbIG1bOLZB2rFI2yZp
      x0LXD3anUid67segSkVcv/I5tdBmaCTPybEhFisRE6MDVKtVLMvCsqxW1ytESz3/LVCsiFWM
      rkJMIj7/+h5nX30NwzAwDAPTNCUA4sCTjjDR0+QxqOhpEgDR0yQAoqdJAERPkwCIniYBED1N
      AiB6mgRA9DQJgOhpiUMhvtlJrB3w2f1CPI+EAAT86Q//SWjl+en779KfknE9ovsk3AIpSqVy
      0wkaQnSDhCuAxRtvvIGWH8TWpakgulPCme3zyV8+5MvPrrBW7Y1ZW6L3JATA4tLbl7CyfYzm
      0+2rSIg2SmwD5AfHSIdVNqpe+yoSoo0S2gCKzbUisZOjL7XLjynF/dvXcfU+RrOKh4sbvHLx
      EgNZZ/+qFaLFEgMwd/8u61EaL/r+kyAVBRQ3NukbTFPydN66MMXidoV8yiSKIsIwlL4DceAl
      doQNjoyyuVzefbsj3aBQGCRslPC0HHcezTN89JTMCRYdJTEAqYFxfv3e35NJp773b5pucObM
      GRqBIpe2qNRc8n25fStUiP3QpBEcUdqqUiku8NHlz6j64a4/ZTlp8rkMumHRn+97pkWxhDgI
      mgTA47PLXxErm9d+dJGMrEImulSTANiMj6Ux+7M8uHmXRhC3tyoh2iRhXSBF4AfECizbeqa9
      nmRdINEpEhrBHr//7e8IYo+qNcK//NOvkBsh0W0SeoJtjhwdwswNc/GVSaR9K7pRQgAiKtsN
      ctkc5y6ck6ljoisljgXarlRkPoDoagkB0Dk1dQpD1qQXXSwxAMdOnabfUVTd3TvChOh0CQGI
      2drYoG9sgqGsPM4U3alpAFZm7/Dn//uC6du32az77axJiLZp2g9QGBlnYmKCt3/6JoX89wfD
      CdENml4BUpl+wsoiH13+jG1P2gCiOyW0AQzGxkdRcYQ8CBXdKmEohM/8g3m2sKk1AgqyMJbo
      QgkBMDj2yhkm+8cY7999VYh6aZWPv57hlSP9zK5scebV1xmWFSREB0kIgIZl6Vz79BOOTB5j
      LPfthrCKIxaK2xweztNQFj9+7RUWKzUGsrbMCRYdIzEAGhBGO0Oiv0upALeyzdzKKqdPHOPz
      63eYunBJ5gSLjpIwH8Dlj//xv5x/52dMjA00/Tb/9n/X0DSZDyA6R+JToNLGEteuXE18DKpp
      2jd+7UOFQuyjhFsgnZGhYTKjg4ShTIkU3SlxLNDm6ipfXv2aUDoCRJdKHA365i/e5fDIoKwK
      IbpW4oywry7/lVAz2G7IYDjRnRI3yPi7X/6SrYrHYE4WvBXdKeEKEPDllRsYhilPd0TXSmwD
      xG6JL6/fpO7vsjiuEF0gsQ1QXiuTT6eoNoL2VSREGyWuC3Tu0hSbbshok8FwQnS6xDbAwso2
      2bhBSaZEii7VJAAhX3x4mW3PJ9QMTFkaRXSpJo9BTd76+Xt49T+SGp+QAIiuldAPEPLo7j1K
      0yscmpyi0L6ahGibhOHQEPouSzPzZA9PMJTb+8oQMhxadIomV4CQjz/4gJXtOuXVTd799W8Y
      ku2/RBdKvAIkUjEP7tykVIdjh/M8nF/j/MVL5NOWXAFEx3iBACjCwOXRzCKRrjg5NshSVTEx
      OkC1WsWyLJkSKQ68xG1SkygVc+fWbcYmTlJaX2JxdQO7MC5zgkVHef59LzSNoeEh6rUqxyZP
      4mT7OTSUb2FpQuy/578FSiBtANEpZOcj0dMkAKKnSQBET5MAiJ4mARA9TQIgepoEQPQ0CYDo
      aRIA0dMkAKKnSQBET5MAiJ7WkgA0Kptcv3EbP5J9BERnaUkAFpaKHB8vsLxeasXhhGib1twC
      aRq6piE7aotO05IAHBkbYnppk/FhWTxFdJanE2KCIMD3W7MEYqPRwLIsTPO5Z1wK0RZPz1Bd
      11t2wj6ZEywBEAfd0zP0yWT2VgiCAMuyZEqkOPCe/ytaxUzfvUk1cjg+luP+bJELFy+SsWVD
      PdE5XmhZlFrDJYwVS1vw6tQRVje2mBgdII5joigiDJtvsC3EQfACAVBoVoa+yKcehNQaHrqR
      Q9d1dF1v6S2VEPvluQOg6Saj/Wkq8QAXxvp4MFvkzJkjaN/YUU+T3fXEASfrAom2UEqhFCge
      /64Ucaxwg5CGG+IGIXU3oOGH1F1/589eiB/u7waNB/Y55ZM3LFbq6ZsVP3nT/JC6t/MG1dwA
      zw/ZrnsopcikLDLOzq+UY5K2LXIZG13f6a3WNQ1N4+nfn+cq9Ty17fcHeVAoBQ03wA1Cao0A
      1w+oeyGuH+L5IUEY0fBDgjCm4QVYpkHaMXc+s5RF2jbJpOydPzsmtrm/t9EvNQAzKyXuzK4/
      Tn1AwwuouwF1L6DmBgRhRBDGBGGEF0SEUUwQRTjWzhuWdkyyKQvHMslnHTQN6u6TE/DJSbjz
      baLrGpZhYFsGpqHj2Aa2aZB+HJZMyiRlm6Qdi1zaxrFNgiD64dqiCM//4dqsff4gDwpNg5Rl
      ks84jA3kyDjm45PZwrFNHMsg41jYj3/XX/LuQy81ANOLm8wVy6Rtk3TKYqAvRSZlkbJM+rIO
      tqmTsne+BZ68eY5t7ow7ekZPQuT6IV4Q4voRnh/unNheQN3d+ZZqeAFL6xU8P8SyjMTaHNvE
      aUFt4uWRNoDoaTIhRvQ0CYDoaRIA0dMkAKKnSQBET5MAiJ4mARA9TQIgelpCAEI2N8rtq0SI
      lyAhAIr/+fd/4w//9SfKbtC+ioRoo4SxQCbv/Oxd6CvgGHKnJLpTwpntc/lPf+HaZ1cpVtz2
      VSREGyUEwOb1d14lNGxG+tK7/LuiVFzk5v0Z3OoWN27eJYhkaTjRWRJugQIePlpj8uQUsYr5
      blZUHDE9v8Kp02eZX5zn6Gg/y+slJkYLjyeMKOJYFssVB1tCAHTy+RTF4jqn412+2ZUiDn1m
      7twgyg5wyDBQUfz05H/yS4iDLCEAMbVqA7Mvu+u/arrJxOEx1qoxJ8fz3J8rcu78+aerQjxZ
      GUKIgywhABphGKBFTeayahrjEycZf/zXNwZGW16cEPutaSO4VmkwceyQrHguulrTK0C1vM79
      Ww9omFmqbkB/ympnXUK0RZMAxFTKNabeeJ21tW360zK3V3SnJgGImL57iw0fBocPv/SlK4TY
      L03aACav//gtjh8Zx69VemZRJ9F7mlwBAj758K+4ZgrbykpDWHSthHWBFL7voxRYtv1MCz7J
      ukCiUyT0A3j8/re/I4w9KuYI//rPv0K6tUS3SRwMd3RiGDM3zGvnJpFmsOhGCQGI2C7XyWVz
      nLtwTuZOiq6UOCOsWq3IgDbR1RICoHPy1CkM6QMQXSwxABMnTpG3Y6qubHYnulNCAGLKpRL9
      h44zlJXHmaI7NQ3AyuxtPvjLZ9y/eZPNut/OmoRom6b9AIWRwxw/tsFPfvYmhXyqnTUJ0TZN
      rwCpTJ6gsshHH33Ktrd7GyAKGty8fZ/q5ipXvrxOI5AxQ6KzJPQEG4yODbO8He4+FkgpFubm
      8QKf5fUyr0yOs7pRYmKkIDvFi46REACfhYcLbMYW1UZA4TsTYuKowfz8EqVanYljx/GDAF2z
      0HUdTdOezgsW4iBLGAwX8PlHH2MWxnnt/Omm/QGlUom0pfFgrsjZs1OYuiaD4UTHSPiK1rBt
      gxuffsJ63Wv6U4VCASfbz4VzpzGl00x0mMQAaEAQBuy2LJAQ3SAhAAFLy1v88h/+kfGcPAYV
      3SkhAAbljUW++uIq254sjy66U+Ly6G/+5B20/CC2PM0RXSpxefRP/vwhX316lbWqLI8uulPi
      jLC3338HZVqM5XdbHl2IzpcQAI9bV6+zvlJktVxvX0VCtFFCG8Dh2NRJ+kOL/qzTvoqEaKPE
      x6Ara1UOj4/jmNIIFt0pcUZY1Nji6rUb1H0Z5Sm6U+KqEOW1Mvl0impD+gFEd0p8CnTu0hSb
      bsRovzwFEt0psQ0wv7JNNq5TkimRoks1CUDIFx9epuL7hJohozxF12ryGNTkrZ+/h1v7b1Lj
      x2RtING1EvoBQmbvP6D0aJUjJ063ryIh2ihhRhiEvsvSzDzZwxMMfXdItFKsLc+y5ZlMjud5
      MLPKGZkRJjpMkytAyMcffMDKdp3y6ibv/vo3DOW++zMKKzOAsbXIvdkKhwbzLK3vTIp/kilZ
      V1QcdIlXgERKsTQ/g50fYWttiSMjAxQbOhOjBWq1GpZlYVmys6Q42BLaAMmUilhbK6JKdSYO
      DXL70TLnL1zAMIynu8Sb5nMfXoi2eP4rQAJpA4hOIaPcRE+TAIieJgEQPU0CIHqaBED0NAmA
      6GkSANHTJACip0kARE+TAIieJgEQPU0CIHqaBED0tJYEII5CKpUqMv9FdJqWBGBu+h6Pph+w
      slVtxeGEaJuWBCA0bM6dOobnyT4CorO0JAB9Fnxx6wH9+b5WHE6ItpEZYaKnPZ2063ke9Xpr
      NsJwXRfTNFs2JziO45btOh/HMZqmoWmtWexLant2SimUUi2t7XmP1RFXgCiKMAyjJcdq9Ukm
      tT07pRRxHLesthd5nW3sB1Bsb6wyu1Qk8hs8mpknUjFLczNU3YDtzSIr66Vd/+duLy6OfB5N
      T1PzAtZXFtjcruPVyswurqLiiOLa+q7H0nV9lw/xcW2LRaLg+7WVN1aZWyru+ph3L7VtfKO2
      wKtx/979XfdcaFrb5i61ze/Uhooorm08w/sW7NTmfr+2OHS5d+cOG+XaM9a2+ri2OXy/wczs
      HFGsWFuep7hV+d6xNE3btTa3WmJ6Zp4oCpl59AgvjNlYXWCjXGN57iF37t6l5oV7ep1KKRZn
      H7K5Xae6tcZScYsocB/XFjE/85ByzW3jFUAp1taKbK4UCR2DQiZNudbAdvrw3AqEGroecfLs
      BRzzh79lGtUSdc+juLxKYPahh3U0TZE3IvSRSdZXV7h0/uzeCn5S23KRMGU+rq3+uLY6o0MD
      bKwXmTx9npT1w98ZSbVpo1Okwy1WyjEXTh975toGMmlKtTqW3YfvuYzmTW7Nl3jvnTf29FJ3
      avMpLq8QGH3o0d9qI5PDtUeZHM5gmXv4Rt2ltvtzFaYmslTckFhPceLoGOnU3rbY2lxfo7q1
      RSUM6O8foFopEQQ2Co+zUyeZf/iAsakL9Nk//Bkov8Zq2WN9dQk0HVtFhKZJf8ahVHUxUzn8
      Rr2NVwANCD36Dh3FNixGBwfw3Dr9hRFMw8dO5clmU8RRvKfDWZbN1laVE0eHSfcPk3JMTMth
      dDBLoOfIZ55hX7MntR0+gm2YjA4W8Lw6+cIIpgEqdOkfPrLnraK+XdsQacfEeFybj8HK8hrZ
      bOqHD/S0Nv9pbSODA3hejf6BEQxV5fqtB1Q21miEe9vFZ6e2yvdqGxvKUiNHeeEO03Mrz1bb
      oce1DQ3gaw5jQwUqtSrl4jI37kyz129YU1PE6T76Mw4Dw2PoQZlU3xCObWLbJsrK7unk33mh
      KdxSkYnJEzjpLAM5m1pkMjZcIEKjullEGVb7AqCUYn5hnuLSIoVcmqu3pjlx4gwL09dwchPo
      0SZbtRhnjy+wtL7C+maJYsMiWL1HoKfpc+DaXJ1BbZP5+XlmFteeqbbVpaW/1TZ5hsXpazi5
      AgtziyyvLBPGewtneeNJbSbB6n18PU3+cW35aAM3jNC0vd2zKqVYWJhjdXGJQl+aq7cecGLy
      LIvT10gVJnjv/fe5ePEcKWNv79u3aivex9fS9Dvw1WyN8Rxomk4ul9ljbezUtrREoS/D1ZsP
      OHc0xZWbjzgzdZpc1iafz+/pWABLS/NsFFdIZfPc+uoL8ocvEpSmifU0jdIGwxPH93ysuLrG
      3FqFleImZlBhvgJnRjNcufGIw2MjaBrYts3/A5Kr4h1dqO1YAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
